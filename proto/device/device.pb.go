// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device/device.proto

/*
Package device is a generated protocol buffer package.

It is generated from these files:
	device/device.proto

It has these top-level messages:
	ExpoPushToken
	Device
	Status
	Position
	MobileNumber
	Response
*/
package device

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ExpoPushToken struct {
	Expopushtoken string `protobuf:"bytes,1,opt,name=expopushtoken" json:"expopushtoken,omitempty"`
}

func (m *ExpoPushToken) Reset()                    { *m = ExpoPushToken{} }
func (m *ExpoPushToken) String() string            { return proto.CompactTextString(m) }
func (*ExpoPushToken) ProtoMessage()               {}
func (*ExpoPushToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ExpoPushToken) GetExpopushtoken() string {
	if m != nil {
		return m.Expopushtoken
	}
	return ""
}

type Device struct {
	Expopushtoken *ExpoPushToken `protobuf:"bytes,1,opt,name=expopushtoken" json:"expopushtoken,omitempty"`
	Type          string         `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Active        bool           `protobuf:"varint,3,opt,name=active" json:"active,omitempty"`
	Latitude      float32        `protobuf:"fixed32,4,opt,name=latitude" json:"latitude,omitempty"`
	Longitude     float32        `protobuf:"fixed32,5,opt,name=longitude" json:"longitude,omitempty"`
	Mobilenumber  string         `protobuf:"bytes,6,opt,name=mobilenumber" json:"mobilenumber,omitempty"`
	Geohash       string         `protobuf:"bytes,7,opt,name=geohash" json:"geohash,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Device) GetExpopushtoken() *ExpoPushToken {
	if m != nil {
		return m.Expopushtoken
	}
	return nil
}

func (m *Device) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Device) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Device) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Device) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Device) GetMobilenumber() string {
	if m != nil {
		return m.Mobilenumber
	}
	return ""
}

func (m *Device) GetGeohash() string {
	if m != nil {
		return m.Geohash
	}
	return ""
}

type Status struct {
	Expopushtoken *ExpoPushToken `protobuf:"bytes,1,opt,name=expopushtoken" json:"expopushtoken,omitempty"`
	Active        bool           `protobuf:"varint,2,opt,name=active" json:"active,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Status) GetExpopushtoken() *ExpoPushToken {
	if m != nil {
		return m.Expopushtoken
	}
	return nil
}

func (m *Status) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type Position struct {
	Expopushtoken *ExpoPushToken `protobuf:"bytes,1,opt,name=expopushtoken" json:"expopushtoken,omitempty"`
	Latitude      float32        `protobuf:"fixed32,3,opt,name=latitude" json:"latitude,omitempty"`
	Longitude     float32        `protobuf:"fixed32,4,opt,name=longitude" json:"longitude,omitempty"`
}

func (m *Position) Reset()                    { *m = Position{} }
func (m *Position) String() string            { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()               {}
func (*Position) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Position) GetExpopushtoken() *ExpoPushToken {
	if m != nil {
		return m.Expopushtoken
	}
	return nil
}

func (m *Position) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Position) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type MobileNumber struct {
	Expopushtoken *ExpoPushToken `protobuf:"bytes,1,opt,name=expopushtoken" json:"expopushtoken,omitempty"`
	Mobilenumber  string         `protobuf:"bytes,2,opt,name=mobilenumber" json:"mobilenumber,omitempty"`
}

func (m *MobileNumber) Reset()                    { *m = MobileNumber{} }
func (m *MobileNumber) String() string            { return proto.CompactTextString(m) }
func (*MobileNumber) ProtoMessage()               {}
func (*MobileNumber) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MobileNumber) GetExpopushtoken() *ExpoPushToken {
	if m != nil {
		return m.Expopushtoken
	}
	return nil
}

func (m *MobileNumber) GetMobilenumber() string {
	if m != nil {
		return m.Mobilenumber
	}
	return ""
}

type Response struct {
	Response bool `protobuf:"varint,1,opt,name=response" json:"response,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Response) GetResponse() bool {
	if m != nil {
		return m.Response
	}
	return false
}

func init() {
	proto.RegisterType((*ExpoPushToken)(nil), "device.ExpoPushToken")
	proto.RegisterType((*Device)(nil), "device.Device")
	proto.RegisterType((*Status)(nil), "device.Status")
	proto.RegisterType((*Position)(nil), "device.Position")
	proto.RegisterType((*MobileNumber)(nil), "device.MobileNumber")
	proto.RegisterType((*Response)(nil), "device.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DeviceService service

type DeviceServiceClient interface {
	// Add a device
	AddDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Response, error)
	// Get Device
	GetDeviceByExpoToken(ctx context.Context, in *ExpoPushToken, opts ...grpc.CallOption) (*Device, error)
	// Update Device Status
	UpdateStatus(ctx context.Context, in *Status, opts ...grpc.CallOption) (*Response, error)
	// Update Device Position
	UpdatePosition(ctx context.Context, in *Position, opts ...grpc.CallOption) (*Response, error)
	// Update Device MobileNumber
	UpdateMobileNumber(ctx context.Context, in *MobileNumber, opts ...grpc.CallOption) (*Response, error)
}

type deviceServiceClient struct {
	cc *grpc.ClientConn
}

func NewDeviceServiceClient(cc *grpc.ClientConn) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) AddDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/device.DeviceService/AddDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetDeviceByExpoToken(ctx context.Context, in *ExpoPushToken, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := grpc.Invoke(ctx, "/device.DeviceService/GetDeviceByExpoToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UpdateStatus(ctx context.Context, in *Status, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/device.DeviceService/UpdateStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UpdatePosition(ctx context.Context, in *Position, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/device.DeviceService/UpdatePosition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UpdateMobileNumber(ctx context.Context, in *MobileNumber, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/device.DeviceService/UpdateMobileNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeviceService service

type DeviceServiceServer interface {
	// Add a device
	AddDevice(context.Context, *Device) (*Response, error)
	// Get Device
	GetDeviceByExpoToken(context.Context, *ExpoPushToken) (*Device, error)
	// Update Device Status
	UpdateStatus(context.Context, *Status) (*Response, error)
	// Update Device Position
	UpdatePosition(context.Context, *Position) (*Response, error)
	// Update Device MobileNumber
	UpdateMobileNumber(context.Context, *MobileNumber) (*Response, error)
}

func RegisterDeviceServiceServer(s *grpc.Server, srv DeviceServiceServer) {
	s.RegisterService(&_DeviceService_serviceDesc, srv)
}

func _DeviceService_AddDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).AddDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/AddDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).AddDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetDeviceByExpoToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpoPushToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDeviceByExpoToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/GetDeviceByExpoToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDeviceByExpoToken(ctx, req.(*ExpoPushToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Status)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).UpdateStatus(ctx, req.(*Status))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_UpdatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Position)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).UpdatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/UpdatePosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).UpdatePosition(ctx, req.(*Position))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_UpdateMobileNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MobileNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).UpdateMobileNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/UpdateMobileNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).UpdateMobileNumber(ctx, req.(*MobileNumber))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "device.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDevice",
			Handler:    _DeviceService_AddDevice_Handler,
		},
		{
			MethodName: "GetDeviceByExpoToken",
			Handler:    _DeviceService_GetDeviceByExpoToken_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _DeviceService_UpdateStatus_Handler,
		},
		{
			MethodName: "UpdatePosition",
			Handler:    _DeviceService_UpdatePosition_Handler,
		},
		{
			MethodName: "UpdateMobileNumber",
			Handler:    _DeviceService_UpdateMobileNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device/device.proto",
}

func init() { proto.RegisterFile("device/device.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x41, 0x4f, 0xea, 0x40,
	0x10, 0xa6, 0x85, 0x57, 0xca, 0x3c, 0x20, 0x2f, 0xfb, 0xd0, 0x34, 0xc4, 0x03, 0xd9, 0x18, 0xc3,
	0x09, 0x12, 0x8c, 0x5e, 0x4c, 0x34, 0x1a, 0x8d, 0x27, 0x0d, 0x29, 0x7a, 0xf4, 0x50, 0xe8, 0x84,
	0x36, 0x42, 0xb7, 0xe9, 0x6e, 0x09, 0x1c, 0xfd, 0x41, 0xfe, 0x30, 0xff, 0x85, 0x61, 0xb7, 0x2d,
	0xb4, 0x36, 0x5e, 0x38, 0x75, 0xbf, 0x6f, 0x67, 0xe6, 0xdb, 0xf9, 0x66, 0x0a, 0xff, 0x5d, 0x5c,
	0xf9, 0x33, 0x1c, 0xaa, 0xcf, 0x20, 0x8c, 0x98, 0x60, 0xc4, 0x50, 0x88, 0x5e, 0x40, 0xeb, 0x61,
	0x1d, 0xb2, 0x71, 0xcc, 0xbd, 0x17, 0xf6, 0x8e, 0x01, 0x39, 0x85, 0x16, 0xae, 0x43, 0x16, 0xc6,
	0xdc, 0x13, 0x5b, 0xc2, 0xd2, 0x7a, 0x5a, 0xbf, 0x61, 0xe7, 0x49, 0xfa, 0xa5, 0x81, 0x71, 0x2f,
	0x2b, 0x90, 0xab, 0xb2, 0x84, 0xbf, 0xa3, 0xa3, 0x41, 0xa2, 0x97, 0x2b, 0x5f, 0xa8, 0x43, 0x08,
	0xd4, 0xc4, 0x26, 0x44, 0x4b, 0x97, 0x22, 0xf2, 0x4c, 0x8e, 0xc1, 0x70, 0x66, 0xc2, 0x5f, 0xa1,
	0x55, 0xed, 0x69, 0x7d, 0xd3, 0x4e, 0x10, 0xe9, 0x82, 0xb9, 0x70, 0x84, 0x2f, 0x62, 0x17, 0xad,
	0x5a, 0x4f, 0xeb, 0xeb, 0x76, 0x86, 0xc9, 0x09, 0x34, 0x16, 0x2c, 0x98, 0xab, 0xcb, 0x3f, 0xf2,
	0x72, 0x47, 0x10, 0x0a, 0xcd, 0x25, 0x9b, 0xfa, 0x0b, 0x0c, 0xe2, 0xe5, 0x14, 0x23, 0xcb, 0x90,
	0x6a, 0x39, 0x8e, 0x58, 0x50, 0x9f, 0x23, 0xf3, 0x1c, 0xee, 0x59, 0x75, 0x79, 0x9d, 0x42, 0xfa,
	0x06, 0xc6, 0x44, 0x38, 0x22, 0xe6, 0x87, 0xb5, 0xba, 0x6b, 0x4b, 0xdf, 0x6f, 0x8b, 0x7e, 0x68,
	0x60, 0x8e, 0x19, 0xf7, 0x85, 0xcf, 0x82, 0xc3, 0x14, 0xf6, 0x0d, 0xaa, 0xfe, 0x66, 0x50, 0xad,
	0x60, 0x10, 0x65, 0xd0, 0x7c, 0x92, 0x66, 0x3c, 0x2b, 0x33, 0x0e, 0x7a, 0x46, 0xd1, 0x6d, 0xfd,
	0xa7, 0xdb, 0xf4, 0x0c, 0x4c, 0x1b, 0x79, 0xc8, 0x02, 0x2e, 0xe7, 0x1a, 0x25, 0x67, 0xa9, 0x63,
	0xda, 0x19, 0x1e, 0x7d, 0xea, 0xd0, 0x52, 0x7b, 0x36, 0xc1, 0x48, 0xae, 0xdb, 0x10, 0x1a, 0xb7,
	0xae, 0x9b, 0xec, 0x5e, 0x3b, 0x7d, 0x90, 0xc2, 0xdd, 0x7f, 0x29, 0x4e, 0x8b, 0xd3, 0x0a, 0xb9,
	0x81, 0xce, 0x23, 0x0a, 0x15, 0x70, 0xb7, 0xd9, 0xbe, 0x5c, 0x2d, 0x7a, 0x79, 0x33, 0xdd, 0x42,
	0x49, 0x5a, 0x21, 0x23, 0x68, 0xbe, 0x86, 0xae, 0x23, 0x30, 0xd9, 0x82, 0x2c, 0x42, 0xe1, 0x52,
	0xd1, 0x4b, 0x68, 0xab, 0x9c, 0x6c, 0xb2, 0x59, 0x54, 0xca, 0x94, 0xe6, 0x5d, 0x03, 0x51, 0x79,
	0xb9, 0x71, 0x74, 0xd2, 0xc8, 0x7d, 0xb6, 0x2c, 0x7f, 0x6a, 0xc8, 0xbf, 0xfb, 0xfc, 0x3b, 0x00,
	0x00, 0xff, 0xff, 0x02, 0x34, 0xb6, 0xf9, 0xf4, 0x03, 0x00, 0x00,
}
